Cool bookmarklets for school


broken flappy bird themed boss game (it doesnt work)


javascript:(function() {    try {        var gameWindow = window.open("", "BossFight", "width=400,height=600");        gameWindow.document.write("<canvas id='gameCanvas' width='400' height='575'></canvas>");        var game = gameWindow.document.getElementById("gameCanvas");        var context = game.getContext("2d");        var birdY = 250;        var birdDY = 0;        var enemies = [];        var bullets = [];        var boss = null;        var bossHealth = 20;        var bossAttacks = ['bullet', 'beam'];        var bossAttackIndex = 0;        gameWindow.onkeydown = function(e) {            if (e.key === ' ' || e.key === 'ArrowUp') { birdDY = -5; }            if (e.key === 'p') { bullets.push({x: 100, y: birdY, dx: 3}); }        };        function gameLoop() {            context.clearRect(0, 0, 400, 600);            birdY += birdDY += 0.25;            context.fillStyle = "yellow";            context.fillRect(80, birdY, 20, 20);            if (enemies.length < 5) {                enemies.push({x: 400, y: Math.random() * 550, dy: (Math.random() - 0.5) * 2});            }            enemies.forEach(function(enemy, i) {                enemy.y += enemy.dy;                context.fillStyle = "red";                context.fillRect(enemy.x -= 2, enemy.y, 20, 20);                if (enemy.x < -20) {                    enemies.splice(i, 1);                }            });            bullets.forEach(function(bullet, i) {                context.fillStyle = "blue";                context.fillRect(bullet.x += bullet.dx, bullet.y, 10, 2);                if (bullet.x > 400) {                    bullets.splice(i, 1);                }            });            if (boss === null && Math.random() < 0.01) {                boss = {x: 400, y: 200, dy: 1};            }            if (boss !== null) {                boss.y += boss.dy;                if (boss.y < 0 || boss.y > 550) {                    boss.dy *= -1;                }                context.fillStyle = "orange";                context.fillRect(boss.x -= 0.5, boss.y, 40, 40);                if (boss.x < -40) {                    boss = null;                    bossHealth = 20;                }            }            gameWindow.requestAnimationFrame(gameLoop);        }        gameWindow.document.body.style.backgroundColor = "skyblue";        gameLoop();    } catch (error) {        alert("An error occurred: " + error.message);    }})();


flappy bird
javascript:(function() {    try {        var gameWindow = window.open("", "FlappyBird", "width=400,height=600");        gameWindow.document.write("<canvas id='gameCanvas' width='400' height='575'></canvas>");        var game = gameWindow.document.getElementById("gameCanvas");        var context = game.getContext("2d");        var birdY = 250;        var birdDY = 0;        var pipeX = 400;        var pipeH = 200;        var score = 0;        var highScore = 0;        var speedMultiplier = 1;        gameWindow.onclick = function() { birdDY = -5; };        gameWindow.onkeydown = function(e) { if (e.key === ' ' || e.key === 'ArrowUp') { birdDY = -5; } };        function gameLoop() {            context.clearRect(0, 0, 400, 600);            birdY += birdDY += 0.25;            context.fillStyle = "yellow";            context.fillRect(80, birdY, 20, 20);            context.fillStyle = "green";            context.fillRect(pipeX -= 3 * speedMultiplier, 0, 50, pipeH);            context.fillRect(pipeX, pipeH + 200, 50, 600);            if (pipeX < -50) {                pipeX = 400;                pipeH = Math.random() * 300;                score++;                if (score > highScore) {                    highScore = score;                }                if (score % 10 === 0 && speedMultiplier < 3) {                    speedMultiplier += 0.01;                }            }            if (birdY < 0 || birdY > 580 || (pipeX < 100 && pipeX > 50 && (birdY < pipeH || birdY > pipeH + 180))) {                birdDY = 0;                birdY = 250;                pipeX = 400;                score = 0;                speedMultiplier = 1;            }            context.fillStyle = "black";            context.font = "16px Arial";            context.fillText("Score: " + score, 10, 20);            context.fillText("High Score: " + highScore, 10, 40);            gameWindow.requestAnimationFrame(gameLoop);        }        gameWindow.document.body.style.backgroundColor = "skyblue";        gameLoop();    } catch (error) {        alert("An error occurred: " + error.message);    }})();




dot madness v4.01
javascript:(function() {    var newWindow = window.open('', '', 'width=1000,height=1000');    var doc = newWindow.document;    var canvas = doc.createElement('canvas');    canvas.width = 1000;    canvas.height = 1000;    doc.body.appendChild(canvas);    var ctx = canvas.getContext('2d');    var player = { x: canvas.width / 2, y: canvas.height / 2, dx: 0, dy: 0, direction: 0 };    var enemies = [];    var bullets = [];    var score = 0;    var gameInterval;    var enemyInterval;    function resetGame() {        player = { x: canvas.width / 2, y: canvas.height / 2, dx: 0, dy: 0, direction: 0 };        enemies = [];        bullets = [];        score = 0;        clearInterval(gameInterval);        clearInterval(enemyInterval);        gameLoop();        spawnEnemies();    }    function gameLoop() {        ctx.clearRect(0, 0, canvas.width, canvas.height);        player.x += player.dx;        player.y += player.dy;        ctx.fillStyle = 'blue';        ctx.beginPath();        ctx.arc(player.x, player.y, 10, 0, Math.PI * 2);        ctx.fill();        enemies.forEach(function(enemy, i) {            var dx = player.x - enemy.x;            var dy = player.y - enemy.y;            var dist = Math.sqrt(dx * dx + dy * dy);            enemy.dx = dx / dist / 2;            enemy.dy = dy / dist / 2;            enemy.x += enemy.dx;            enemy.y += enemy.dy;            ctx.fillStyle = enemy.color;            ctx.beginPath();            ctx.arc(enemy.x, enemy.y, enemy.size, 0, Math.PI * 2);            ctx.fill();            if (dist < 20) {                doc.body.innerHTML = 'Game Over! Your score was: ' + score;                return;            }            bullets.forEach(function(bullet, j) {                if (Math.sqrt(Math.pow(bullet.x - enemy.x, 2) + Math.pow(bullet.y - enemy.y, 2)) < 15 && bullet.owner !== 'enemy') {                    enemy.health--;                    if (enemy.health <= 0) {                        enemies.splice(i, 1);                        score += enemy.size === 20 ? 3 : 1;                    }                    bullets.splice(j, 1);                }                if (bullet.owner === %27enemy%27 && Math.sqrt(Math.pow(bullet.x - player.x, 2) + Math.pow(bullet.y - player.y, 2)) < 15) {                    doc.body.innerHTML = %27Game Over! Your score was: %27 + score;                    return;                }            });        });        bullets.forEach(function(bullet) {            bullet.x += bullet.dx * 4.8;            bullet.y += bullet.dy * 4.8;            ctx.fillStyle = bullet.color;            ctx.beginPath();            ctx.arc(bullet.x, bullet.y, 5, 0, Math.PI * 2);            ctx.fill();        });        ctx.fillStyle = %27black%27;        ctx.font = %2720px Arial%27;        ctx.fillText(%27Press P to shoot. Use ASWD to move. Score: %27 + score, 10, 30);        if (doc.body.innerHTML.startsWith(%27Game Over%27)) return;        gameInterval = requestAnimationFrame(gameLoop);    }    function spawnEnemies() {        enemyInterval = setInterval(function() {            if (enemies.length >= 15) return;            var angle = Math.random() * Math.PI * 2;            var isOrange = Math.random() < 0.05;            var size = isOrange ? (Math.random() < 0.5 ? 20 : 10) : (Math.random() < 0.1 ? 20 : 10);            var enemy = {                x: Math.random() * (canvas.width - 400) + 200,                y: Math.random() * (canvas.height - 400) + 200,                dx: Math.cos(angle) / 2,                dy: Math.sin(angle) / 2,                color: isOrange ? %27orange%27 : %27purple%27,                size: size,                health: size === 20 ? 3 : 1            };            enemies.push(enemy);            if (enemy.color === %27orange%27) {                setInterval(function() {                    var dx = player.x - enemy.x;                    var dy = player.y - enemy.y;                    var dist = Math.sqrt(dx * dx + dy * dy);                    var angle = Math.atan2(dy, dx);                    bullets.push({ x: enemy.x, y: enemy.y, dx: Math.cos(angle) * 1.6, dy: Math.sin(angle) * 1.6, color: %27black%27, owner: %27enemy%27 });                }, 3000);            }        }, 500);    }    doc.addEventListener(%27keydown%27, function(e) {        if (e.key === %27a%27) { player.dx = -4; player.direction = Math.PI; }        if (e.key === %27d%27) { player.dx = 4; player.direction = 0; }        if (e.key === %27w%27) { player.dy = -4; player.direction = 1.5 * Math.PI; }        if (e.key === %27s%27) { player.dy = 4; player.direction = 0.5 * Math.PI; }        if (e.key === %27p%27) {            bullets.push({ x: player.x, y: player.y, dx: Math.cos(player.direction) * 1.6, dy: Math.sin(player.direction) * 1.6, owner: %27player%27, color: %27red%27 });        }        if (e.key === %27r%27 && doc.body.innerHTML.startsWith(%27Game Over%27)) {            resetGame();        }    });    doc.addEventListener(%27keyup%27, function(e) {        if (e.key === %27a%27 || e.key === %27d%27) player.dx = 0;        if (e.key === %27w%27 || e.key === %27s%27) player.dy = 0;    });    gameLoop();    spawnEnemies();})();


george conways game of life (press p to freeze the game)
javascript:(function() {    var gameWindow = window.open("", "Conway's Game of Life", "width=800,height=1000");    var doc = gameWindow.document;    var canvas = doc.createElement('canvas');    canvas.width = 1500;    canvas.height = 1500;    doc.body.appendChild(canvas);    var ctx = canvas.getContext('2d');    var resolution = 20;    var cols = canvas.width / resolution;    var rows = canvas.height / resolution;    var grid = new Array(cols).fill(null).map(() => new Array(rows).fill(0));    var paused = false;    canvas.addEventListener('click', function(event) {        var x = Math.floor((event.clientX - canvas.offsetLeft) / resolution);        var y = Math.floor((event.clientY - canvas.offsetTop) / resolution);        grid[x][y] = grid[x][y] ? 0 : 1;        draw();    }, false);    doc.addEventListener(%27keydown%27, function(event) {        if (event.key === %27p%27) {            paused = !paused;        }    }, false);    function update() {        grid = grid.map((col, x) => col.map((cell, y) => {            var neighbours = 0;            for (var i = -1; i < 2; i++) {                for (var j = -1; j < 2; j++) {                    if (i === 0 && j === 0) continue;                    var x2 = (x + i + cols) % cols;                    var y2 = (y + j + rows) % rows;                    neighbours += grid[x2][y2];                }            }            return neighbours === 3 || (neighbours === 2 && cell) ? 1 : 0;        }));    }    function draw() {        ctx.clearRect(0, 0, canvas.width, canvas.height);        grid.forEach((col, x) => col.forEach((cell, y) => {            ctx.beginPath();            ctx.rect(x * resolution, y * resolution, resolution, resolution);            ctx.fillStyle = cell ? %27black%27 : %27white%27;            ctx.fill();            ctx.stroke();        }));    }    setInterval(function() {        if (!paused) {            update();        }        draw();    }, 400);})();


random bible verse
javascript: (function() {  fetch('https://labs.bible.org/api/?passage=random&type=json%27)    .then(response => response.json())    .then(data => {      let verse = data[0].bookname + " " + data[0].chapter + ":" + data[0].verse + " - " + data[0].text;      alert(verse);    })    .catch(error => console.error(%27Error:%27, error));})();




autoclicker ~20 cps (varied time between clicks) press p to pause? idk if i coded that in
javascript:(function(){    var intervalId = null;    var lastClick = null;    document.addEventListener('click', function(event) {        lastClick = {x: event.clientX, y: event.clientY};        if(intervalId === null) {            intervalId = setInterval(function() {                if(lastClick !== null) {                    var clickEvent = new MouseEvent('click', {                        'view': window,                        'bubbles': true,                        'cancelable': true,                        'clientX': lastClick.x,                        'clientY': lastClick.y                    });                    document.elementFromPoint(lastClick.x, lastClick.y).dispatchEvent(clickEvent);                }            }, 50 + Math.floor(Math.random() * 10));        }    });    document.addEventListener('keydown', function(event) {        if(event.key === 'Shift') {            clearInterval(intervalId);            intervalId = null;        }    });})();


autoclicker 20cps normal (press p to pause? idk if i coded that in)
javascript:(function() {  var clicker;  document.addEventListener('click', function(event) {    var x = event.clientX, y = event.clientY;    if(clicker) {      return;    }    clicker = setInterval(function() {      var clickEvent = document.createEvent('MouseEvents');      clickEvent.initMouseEvent('click', true, true, window, 0, 0, 0, x, y, false, false, false, false, 0, null);      document.elementFromPoint(x, y).dispatchEvent(clickEvent);    }, 50);  });  document.addEventListener('keydown', function(event) {    if(event.key === 'Shift' && event.location === 2) {      clearInterval(clicker);      clicker = null;    }  });})();


display all links on a page
javascript:(function() {    var links = document.getElementsByTagName('a');    var linkList = '';    for (var i = 0; i < links.length; i++) {        linkList += links[i].href + '\n';    }    alert(linkList);})();